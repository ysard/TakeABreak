Description: Fix segfaults and error due to gatbcore 1.3.0
 Fix: ERROR: missing property "-storage-type"
 => due to changes in API: STR_STORAGE_TYPE must be set.
 .
 Fix: segfault after the load of a fasta file
 Report: 
 [DSK: Collecting stats on reads_r1       ]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec   cpu:  -1.0 %   mem: [  11,   11,   11] MB 
 [DSK: Pass 1/1, Step 1: partitioning     ]  0    %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec   cpu:  -1.0 %   mem: [  13,   13,   13] MB Erreur de segmentation
 => STR_SOLIDITY_KIND was set to "one" instead "sum".
 to be continued...
Author: <name and email of author, optional>
Origin: <upstream|backport|vendor|other>, <URL, required except if Author is present>
Bug: <URL to the upstream bug report if any, implies patch has been forwarded, optional>
Bug-<Vendor>: <URL to the vendor bug report if any, optional>
Forwarded: <URL|no|not-needed, useless if you have a Bug field, optional>
Applied-Upstream: <version|URL|commit, identifies patches merged upstream, optional>
Reviewed-by: <name and email of a reviewer, optional>
Last-Update: <YYYY-MM-DD, last update of the meta-information, optional>
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
--- a/src/TakeABreak.cpp
+++ b/src/TakeABreak.cpp
@@ -68,7 +68,7 @@
 ** RETURN  :
 ** REMARKS :
 *********************************************************************/
-TakeABreak::TakeABreak () : Tool("TakeABreak"), _kmerSize(27), shannon_limit(1.7), synchro(0)
+TakeABreak::TakeABreak () : Tool("TakeABreak"), shannon_limit(1.7), synchro(0)
 {
 
     /* Commented this until there is a function hide() for parser
@@ -80,34 +80,37 @@
      */
 	//getParser()->push_back (Graph::getOptionsParser(false),0);
 
-//	IOptionsParser* generalParser = getParser();
-//	generalParser->setName("general");
+
+    setParser (new OptionsParser ("TakeABreak"));
+
 	IOptionsParser* generalParser = new OptionsParser("General");
-	generalParser->push_back (new OptionNoParam (STR_HELP, "help", false));
-	generalParser->push_back (new OptionNoParam (STR_VERSION, "version", false));
-	generalParser->push_back (new OptionOneParam (STR_NB_CORES,    "number of cores",      false, "0"  ));
-	generalParser->push_back (new OptionOneParam (STR_VERBOSE,     "verbosity level",      false, "1"  ));
+	generalParser->push_back (new OptionNoParam   (STR_HELP,       "help", false));
+	generalParser->push_back (new OptionNoParam   (STR_VERSION,    "version", false));
+    generalParser->push_front (new OptionOneParam (STR_VERBOSE,    "verbosity level", false, "1"));
+    generalParser->push_front (new OptionOneParam (STR_NB_CORES,   "number of cores", false, "0"));
+    generalParser->push_front (new OptionOneParam (STR_MAX_MEMORY, "max memory for graph building (in MBytes)", false, "2000"));
+    generalParser->push_front (new OptionOneParam (STR_MAX_DISK,   "max disk for graph building   (in MBytes)", false, "0"));
 //
-	setParser (new OptionsParser ("TakeABreak"));
 
 	IOptionsParser* inputParser = new OptionsParser("Input / output");
 	inputParser->push_front (new OptionOneParam (STR_URI_OUTPUT, "prefix for output files", false, ""));
-	inputParser->push_front (new OptionOneParam (STR_URI_GRAPH, "input graph file (likely a hdf5 file)",  false, ""));
-	inputParser->push_front (new OptionOneParam (STR_URI_INPUT, "input read file(s)",  false, ""));
+	inputParser->push_front (new OptionOneParam (STR_URI_GRAPH,  "input graph file (likely a hdf5 file)", false, ""));
+	inputParser->push_front (new OptionOneParam (STR_URI_INPUT,  "input read file(s)", false, ""));
 
 	IOptionsParser* inversionParser = new OptionsParser("Inversion");
 	inversionParser->push_front (new OptionOneParam (STR_LCT, "local complexity threshold (LCT)", false, "100"));
 	inversionParser->push_front (new OptionOneParam (STR_TOLERANCE_RC, "maximal repeat size at the breakpoint (longest common suffix between a and b')", false, "8"));
 	inversionParser->push_front (new OptionOneParam (STR_MAX_SIM, "max similarity percentage between a and b' and between u and v'", false, "80"));
 
-	IOptionsParser* graphParser = new OptionsParser("Graph");
-	graphParser->push_front (new OptionOneParam (STR_MAX_MEMORY, "max memory (in MBytes)", false, "2000"));
-	graphParser->push_front (new OptionOneParam (STR_MAX_DISK, "max disk   (in MBytes)", false, "0"));
-	graphParser->push_front (new OptionOneParam (STR_SOLIDITY_KIND, "way to consider a solid kmer with several datasets (sum, one, or all)", false, "one"));
-	string abundanceMax = Stringify::format("%ld", std::numeric_limits<CountNumber>::max()); //to be sure in case CountNumber definition changes
-	graphParser->push_front (new OptionOneParam (STR_KMER_ABUNDANCE_MAX, "maximal abundance threshold for solid kmers", false, abundanceMax));
-	graphParser->push_front (new OptionOneParam (STR_KMER_ABUNDANCE_MIN, "minimal abundance threshold for solid kmers", false, "auto"));
-	graphParser->push_front (new OptionOneParam (STR_KMER_SIZE, "size of a kmer", false, "31"));
+    IOptionsParser* graphParser = new OptionsParser("Graph building");
+    string abundanceMax = Stringify::format("%ld", std::numeric_limits<CountNumber>::max()); //to be sure in case CountNumber definition changes
+    graphParser->push_front (new OptionOneParam (STR_KMER_ABUNDANCE_MAX, "maximal abundance threshold for solid kmers", false, abundanceMax));
+    graphParser->push_front (new OptionOneParam (STR_KMER_ABUNDANCE_MIN, "minimal abundance threshold for solid kmers", false, "auto"));
+    graphParser->push_front (new OptionOneParam (STR_KMER_SIZE, "size of a kmer", false, "31"));
+    // BEWARE: default param was "one", in set "sum" since "one" crashes libgatbcore on this symbol:
+    // gatb::core::kmer::impl::SortingCountAlgorithm<32ul>::fillSolidKmers_aux(gatb::core::kmer::ICountProcessor<32ul>*, unsigned long, gatb::core::kmer::impl::PartiInfo<5ul>&)
+    // note: The previous IOptionsParser commented below had "sum" param (like MindTheGap)
+    graphParser->push_front (new OptionOneParam (STR_SOLIDITY_KIND, "way to consider a solid kmer with several datasets (sum, one, or all)", false, "sum"));
 
 	getParser()->push_front(generalParser);
 	getParser()->push_front(inversionParser);
@@ -260,6 +263,8 @@
         //fprintf(log,"Creating the graph from file(s) %s\n",getInput()->getStr(STR_URI_INPUT).c_str());
         
         // We need to add the options of dbgh5/Graph that were masked to the user (or we could create a new Properties object)
+        getInput()->add(0,STR_SOLIDITY_KIND, "sum"); //way to consider a solid kmer with several datasets (sum, min or max)
+
         getInput()->add(0,STR_BANK_CONVERT_TYPE,"tmp");
         getInput()->add(0,STR_URI_OUTPUT_DIR, ".");
         getInput()->add(0,STR_URI_OUTPUT_TMP, ".");
@@ -268,12 +273,13 @@
         getInput()->add(0,STR_DEBLOOM_IMPL, "minimizer"); //minimizer => STR_BLOOM_TYPE = neighbor
         getInput()->add(0,STR_BRANCHING_TYPE, "stored");
         getInput()->add(0,STR_INTEGER_PRECISION, "0");
-        getInput()->add(0,STR_MPHF_TYPE, "none");
+        // getInput()->add(0,STR_MPHF_TYPE, "none");
         getInput()->add(0,STR_MINIMIZER_SIZE, "8");
         getInput()->add(0,STR_REPARTITION_TYPE, "0");
         getInput()->add(0,STR_MINIMIZER_TYPE, "0");
         getInput()->add(0,STR_HISTOGRAM_MAX, "10000");
         getInput()->add(0,STR_KMER_ABUNDANCE_MIN_THRESHOLD,"3");
+        getInput()->add(0,STR_STORAGE_TYPE,"hdf5");
         //getInput()->add(0,STR_URI_SOLID_KMERS, ""); //surtout ne pas decommenter cette ligne, sinon les kmers solids sont stockes dans le fichier ./.h5 et les infos ne sont plus dans le output.h5
         
         //Warning if kmer size >128 cascading debloom does not work
